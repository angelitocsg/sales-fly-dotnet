@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inherits LayoutComponentBase

<NavMenu Nome=@Nome LogoutClick=@HandleLogout />

<div class="container">
    @if (string.IsNullOrWhiteSpace(Nome))
    {
        <div class="card mt-4" style="max-width: 330px; margin: 0 auto">
            <div class="card-body">
                <h5 class="card-title">Passagens aéreas</h5>
                <form>
                    <div class="mb-3">
                        <label class="form-label">Informe seu nome</label>
                        <input type="text" class="form-control" @bind-value=nome>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" @onclick=HandleEnterClick>
                            Entrar
                        </button>
                    </div>
                </form>
                @if (!string.IsNullOrWhiteSpace(error))
                {
                    <div class="alert alert-danger alert-sm p-1 ps-3 pe-3 mt-3">
                        @error
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <CascadingValue Value="Nome">
            @Body
        </CascadingValue>
    }
</div>

@code {
    [Parameter]
    public string Nome { get; set; }

    private string nome { get; set; }
    private string error { get; set; }

    protected async override Task OnInitializedAsync()
    {
        nome = await localStorage.GetItemAsync<string>("nome_usuario");
        if (!string.IsNullOrWhiteSpace(nome))
            await ValidaNome();

        await base.OnInitializedAsync();
    }

    private async Task ValidaNome()
    {
        if (!string.IsNullOrWhiteSpace(nome) && nome.Length > 3)
        {
            Nome = nome;
            error = string.Empty;
            await localStorage.SetItemAsync("nome_usuario", Nome);
        }
        else
        {
            error = "Nome inválido";
            await localStorage.SetItemAsync("nome_usuario", string.Empty);
        }
    }

    private async void HandleEnterClick()
    {
        await ValidaNome();
    }

    private async void HandleLogout()
    {
        Nome = string.Empty;
        await localStorage.SetItemAsync("nome_usuario", string.Empty);
        await localStorage.ClearAsync();
    }
}